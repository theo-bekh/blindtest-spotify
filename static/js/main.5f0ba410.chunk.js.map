{"version":3,"sources":["loading.svg","Button.js","App.js","registerServiceWorker.js","index.js","logo.svg"],"names":["module","exports","Button","props","onClick","children","getRandomNumber","x","Math","floor","random","AlbumCover","src","track","album","images","url","style","width","height","App","useState","songsLoaded","isLoaded","tracks","setTracks","userReady","userIsReady","currentTrack","setCurrentTrack","nextPlay","useEffect","fetch","method","headers","Authorization","then","response","json","data","items","console","log","className","logo","alt","choosenTracks","push","array","counter","length","index","temp","shuffleArray","preview_url","playStatus","Sound","status","PLAYING","map","trackChoose","id","swal","name","artists","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,qC,mLCO5BC,G,MAJA,SAACC,GAAD,OACb,4BAAQC,QAASD,EAAMC,SAAUD,EAAME,YCuBzC,SAASC,EAAgBC,GACvB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,GAIpC,IAAMI,EAAa,SAACR,GAClB,IAAMS,EAAMT,EAAMU,MAAMC,MAAMC,OAAO,GAAGC,IACxC,OACI,yBAAKJ,IAAKA,EAAKK,MAAO,CAAEC,MAAO,IAAKC,OAAQ,QA4GnCC,EAxGH,WAAO,IAAD,EAEgBC,oBAAS,GAFzB,mBAETC,EAFS,KAEIC,EAFJ,OAGYF,mBAAS,IAHrB,mBAGTG,EAHS,KAGDC,EAHC,OAIiBJ,oBAAS,GAJ1B,mBAITK,EAJS,KAIEC,EAJF,OAKwBN,mBAAS,MALjC,mBAKTO,EALS,KAKKC,EALL,OAMaR,mBAAS,MANtB,6BA0ChB,SAASS,IACPD,EAAgBL,EAAOlB,EAAgB,KAAKO,OAG9C,GAtCAkB,qBAAU,WACRC,MAAM,uCAAwC,CAC5CC,OAAQ,MACRC,QAAS,CACRC,cAAe,qSAGfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACLd,EAAUc,EAAKC,OACfjB,GAAS,GACTM,EAAgBU,EAAKC,MAAMlC,EAAgB,KAAKO,OAChD4B,QAAQC,IAAI,wDAA6CH,QAE7D,IAEFR,qBAAU,cAER,KAoBGT,EACH,OACE,yBAAKqB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK/B,IAAKgC,IAAMD,UAAU,WAAWE,IAAI,SACzC,wBAAIF,UAAU,aAAd,+BAEF,yBAAKA,UAAU,cACb,oEAEF,yBAAKA,UAAU,iBAKrB,IAAKjB,EACH,OACE,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK/B,IAAKgC,IAAMD,UAAU,WAAWE,IAAI,SACzC,wBAAIF,UAAU,aAAd,+BAEF,yBAAKA,UAAU,cACb,oEAEF,yBAAKA,UAAU,eACf,kBAAC,EAAD,CAAQvC,QAAS,kBAAMuB,GAAY,KAAnC,4BAKN,IAAImB,EAAgB,GAKpB,OAJAA,EAAcC,KAAKnB,GACnBkB,EAAcC,KAAKvB,EAAOlB,EAAgB,KAAKO,OAC/CiC,EAAcC,KAAKvB,EAAOlB,EAAgB,KAAKO,OAC/CiC,EA5GF,SAAsBE,GAGpB,IAFA,IAAIC,EAAUD,EAAME,OAEbD,EAAU,GAAG,CAClB,IAAIE,EAAQ7C,EAAgB2C,GAExBG,EAAOJ,IADXC,GAEAD,EAAMC,GAAWD,EAAMG,GACvBH,EAAMG,GAASC,EAGjB,OAAOJ,EAiGSK,CAAaP,GAE3B,yBAAKH,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK/B,IAAKgC,IAAMD,UAAU,WAAWE,IAAI,SACzC,wBAAIF,UAAU,aAAd,+BAEF,kBAAC,IAAD,CAAO3B,IAAKY,EAAa0B,YAAaC,WAAYC,IAAMC,OAAOC,UAC/D,yBAAKf,UAAU,cACZG,EAAca,KAAI,SAAAC,GAAW,OAC5B,kBAAC,EAAD,CAAY/C,MAAO+C,QAGvB,yBAAKjB,UAAU,eACdG,EAAca,KAAI,SAAA9C,GAAK,OACtB,kBAAC,EAAD,CAAQT,QAAS,WAAiBS,EAAMgD,KAlEjCjC,EAAaiC,GACtBC,KAAK,QAAS,+BAA8B,WAAW1B,KAAKN,GAE5DgC,KAAK,UAAQ,cAAYlC,EAAamC,KAAK,OAAOnC,EAAaoC,QAAQ,GAAGD,KAAM,SAAS3B,KAAKN,KAgE3FjB,EAAMkD,KADP,IACa,6BADb,IACqBlD,EAAMmD,QAAQ,GAAGD,YC9HxCE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTpC,MAAK,SAAAwC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1BzC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrByC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,qBAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,qBAAN,sBAEPzB,EAwCV,SAAiCO,GAE/BxC,MAAMwC,GACHpC,MAAK,SAAAC,GAGkB,MAApBA,EAASoB,SACuD,IAAhEpB,EAASH,QAAQ2D,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAM3D,MAAK,SAAAwC,GACjCA,EAAaoB,aAAa5D,MAAK,WAC7B+B,OAAOC,SAAS6B,eAKpB1B,EAAgBC,MAGnBW,OAAM,WACL1C,QAAQC,IACN,oEA5DAwD,CAAwB1B,GAGxBD,EAAgBC,OChCxB2B,I,kBCPAnG,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.5f0ba410.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","/*global swal*/\n\nimport React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport loading from './loading.svg';\nimport './App.css';\nimport Sound from 'react-sound';\nimport Button from './Button';\nimport { useState } from 'react';\n\nconst apiToken = \"BQCVKfTROH0MqXg0nBsnc0AJzDKTKMEenabdKwPO-XCuU1KnGO3QNzAMK9VQxBVEhRim5YDqtDkMWxKF3GGJ_zN-R1vkwiCoVqeEwoJfI9h3mIZNBqPF0oAa0vSfWYoqNwqSu6pAhFKYVb9YxXnZT_MtmnKwbN-dNhZGfyz0-WaGDRANLrTsFLYw0RuUZelL75kBOdKeCuzs0X_XSxC9RWrlwpbrhGIu5DLLFzYKmWJwv-LYvGL8oxZ7sgHRPVMrqERKiPge2tQtfWGTmDwJidAi\";\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\n/* Display the album cover */\nconst AlbumCover = (props) =>  {\n  const src = props.track.album.images[0].url;\n  return (\n      <img src={src} style={{ width: 400, height: 400 }} />\n  );\n}\n\nconst App = () => {\n\n  const [songsLoaded, isLoaded] = useState(false);\n  const [tracks, setTracks] = useState([]);\n  const [userReady, userIsReady] = useState(false);\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [timeout,setTimeOut] = useState(null);\n\n  useEffect(()=> {\n    fetch('https://api.spotify.com/v1/me/tracks', {\n      method: 'GET',\n      headers: {\n       Authorization: 'Bearer ' + apiToken,\n      },\n    })\n      .then(response => response.json())\n      .then((data) => {\n        setTracks(data.items);\n        isLoaded(true);\n        setCurrentTrack(data.items[getRandomNumber(20)].track);\n        console.log(\"Réponse reçue ! Voilà ce que j'ai reçu : \", data);\n      })\n  },[])\n\n  useEffect(()=>{\n    //setTimeOut(setTimeout(displayResult,30000));\n  },[])\n\n  function checkAnswer(id){\n    //clearTimeout(timeout);\n    if (id === currentTrack.id){\n      swal('Bravo', 'C\\'était bien le bon titre', 'success').then(nextPlay);\n    }else{\n      swal('Raté', 'C\\'était '+currentTrack.name+' de '+currentTrack.artists[0].name, 'error').then(nextPlay);\n    }\n  }\n\n  function displayResult(){\n    //swal('Trop long', 'C\\'était '+tr.name+' de '+tr.artists[0].name, 'error').then(nextPlay);\n    swal('Trop long', 'Essaye encore', 'error').then(nextPlay);\n  }\n\n  function nextPlay(){\n    setCurrentTrack(tracks[getRandomNumber(20)].track);\n  }\n\n  if (!songsLoaded){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n          <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n        </header>\n        <div className=\"App-images\">\n          <p>Blindtest est en cours de chargement</p>\n        </div>\n        <div className=\"App-buttons\">\n        </div>\n      </div>\n    );\n  }\n  if (!userReady){\n    return(\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n          <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n        </header>\n        <div className=\"App-images\">\n          <p>Blindtest est en cours de chargement</p>\n        </div>\n        <div className=\"App-buttons\">\n        <Button onClick={() => userIsReady(true)}>Commencer le blindtest</Button>\n        </div>\n      </div>\n    );\n  }\n  let choosenTracks = [];\n  choosenTracks.push(currentTrack);\n  choosenTracks.push(tracks[getRandomNumber(20)].track);\n  choosenTracks.push(tracks[getRandomNumber(20)].track);\n  choosenTracks = shuffleArray(choosenTracks);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n        <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n      </header>\n      <Sound url={currentTrack.preview_url} playStatus={Sound.status.PLAYING}/>\n      <div className=\"App-images\">\n        {choosenTracks.map(trackChoose => \n          <AlbumCover track={trackChoose} />\n          )}\n      </div>\n      <div className=\"App-buttons\">\n      {choosenTracks.map(track=>\n        <Button onClick={()=> checkAnswer(track.id)}>\n        {track.name} <br /> {track.artists[0].name}</Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";"],"sourceRoot":""}